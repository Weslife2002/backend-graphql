type Query {
  findUserShortByEmail(email: String!): UserShort!
  getAllLoginDevices: [Device!]!
}

type Mutation {
  userSignUp(userSignUpInput: userSignUpInput!): UserSignUpReponse!
  userAuth(email: String!, password: String!): UserAuthReponse!
  googleUserAuth: UserAuthReponse!
  facebookUserAuth: UserAuthReponse!
  updateMyAccount(photo: String, bio: String): UpdateAccountResponse!
  endMyAccountSession: GeneralMutationResponse!
  logOutAnDevice(deviceId: String): GeneralMutationResponse!
  deleteMyAccount: GeneralMutationResponse!
  deleteAccountByAdmin(email: String!): GeneralMutationResponse!
}

type UserAccount {
  email: String!
  username: String!
  photo: String!
  bio: String!
  numberOfFollowers: String!
  numberOfFollowees: String!
  numberOfNewNotification: String!
  topFiveFollowees: [String!]!
  password: String!
  connectFacebook: Boolean!
  connectGoogle: Boolean!
  followingTopics: [String!]!
  posts: [PostThumbnail!]!
}

type UserShort {
  email: String!
  username: String!
  numberOfFollowers: Int!
  photoUrl: String!
  bio: String!
  """Actually, we don't need to includes PostThumbnail inside as we don't 
  query userShort with his list of PostThumbnails, in this case, I will 
  keep it so that we can use DataLoader to optimize the performance """
  posts: [PostThumbnail!]!
}
